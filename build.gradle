buildscript {
    apply from: rootProject.file("dependencies.gradle")
    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        // Remove once butterknife is updated to a stable version
        // TODO: https://github.com/uber/okbuck/issues/570
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    dependencies {
        classpath deps.build.androidPlugin
        classpath deps.build.butterKnifePlugin
        classpath deps.build.kotlinPlugin
        classpath deps.build.kotlinAllOpen
        classpath deps.build.sqlDelightPlugin
        classpath deps.build.shadowJar
    }
    configurations.all {
        exclude group:"com.android.tools.build", module: "transform-api"
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.versions.kotlin}"
        }
    }
}

allprojects { project ->
    project.apply from: rootProject.file("dependencies.gradle")
    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        // Remove once butterknife is updated to a stable version
        // TODO: https://github.com/uber/okbuck/issues/570
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    configurations.all {
        exclude group:"com.android.tools.build", module: "transform-api"
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.versions.kotlin}"
        }
    }
}

apply plugin: "com.uber.okbuck"

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin("java")) {
            addCommonConfigurationForJavaModules(project)
        } else if (
            (
                    project.plugins.hasPlugin("com.android.application") || 
                    project.plugins.hasPlugin("com.android.library")
            ) &&
                    !project.getName().contains("mini-tokped")
        ) {
            addCommonConfigurationForAndroidModules(project)
        }

        project.tasks.withType(Test) { Test task ->
            task.jvmArgs << "-Djava.awt.headless=true"
        }
    }
}

def addCommonConfigurationForJavaModules(Project project) {
    project.sourceCompatibility = JavaVersion.VERSION_1_8
    project.targetCompatibility = JavaVersion.VERSION_1_8
}

def addCommonConfigurationForAndroidModules(Project project) {
    project.android {
        compileSdkVersion config.build.compileSdk
        buildToolsVersion config.build.buildTools

        defaultConfig {
            minSdkVersion config.build.minSdk
            targetSdkVersion config.build.targetSdk
            vectorDrawables.useSupportLibrary = true
            versionCode 1
            versionName "1.0"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        lintOptions {
            lintConfig project.rootProject.file("lint.xml")
        }
    }

    def variants
    if (project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin("com.android.application")) {
        project.android {
            signingConfigs {
                debug {
                    if (project.path.equals(":kotlin-app")) {
                        storeFile project.rootProject.file("config/signing/debug_2.keystore")
                    } else if (project.path.equals(":app")) {
                        storeFile project.file("debug.keystore")
                    } else {
                        storeFile project.rootProject.file("config/signing/debug.keystore")
                    }
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.debug
                }
            }
        }
    }
    if (project.plugins.hasPlugin("com.android.application")) {
        variants = project.android.applicationVariants
    } else {
        variants = project.android.libraryVariants
    }

    if (project.plugins.hasPlugin("com.squareup.sqldelight")) {
        variants.all {

            project.android.sourceSets."${it.name}".java.srcDir project.file("build/generated/source/sqldelight")
            project.android.sourceSets."${it.name}".kotlin.srcDir project.file("build/generated/source/sqldelight")

            project.afterEvaluate { proj ->
                Task okbuckTask = proj.tasks.getByName("okbuck")
                Task sqlDelightTask = proj.tasks.getByName("generate${it.name.capitalize()}SqlDelightInterface")
                okbuckTask.dependsOn(sqlDelightTask)
            }
        }
    }
}

okbuck {
    buckBinary = "com.github.tokopedia:buck:7c9bdd9e65d5c25eeb5c4c4e2542267b6b6c6900@pex"
    resourceUnion = true
    buildToolVersion = config.build.buildTools
    target = "android-${config.build.compileSdk}"

//    extraDepCachesMap << [tools:true]
//
//    primaryDexPatterns = [
//            "app": [
//                    "^com/uber/okbuck/example/AppShell^",
//                    "^com/uber/okbuck/example/BuildConfig^",
//                    "^androidx/multidex/",
//                    "^com/facebook/buck/android/support/exopackage/",
//                    "^com/github/promeg/xlog_android/lib/XLogConfig^",
//                    "^com/squareup/leakcanary/LeakCanary^",
//                    "^com/uber/okbuck/example/common/Calc^",
//                    "^com/uber/okbuck/example/common/BuildConfig^",
//            ]
//    ]
//    exopackage = [
//            "appDevDebug": true
//    ]
//    appLibDependencies = [
//            "appProd": [
//                    "buck-android-support",
//                    "androidx.multidex:multidex",
//                    "libraries/javalibrary:main",
//                    "libraries/common:paidRelease",
//            ],
//            "appDev" : [
//                    "buck-android-support",
//                    "androidx.multidex:multidex",
//                    "libraries/javalibrary:main",
//                    "libraries/common:freeDebug",
//            ],
//            "appDemo": [
//                    "buck-android-support",
//                    "androidx.multidex:multidex",
//                    "libraries/javalibrary:main",
//                    "libraries/common:paidRelease",
//            ]
//    ]
    buckProjects = project.subprojects.findAll { it.name != "plugin" && it.name != "transform-cli" }

    lintExclude.put("another-app", ["debug"])

    intellij {
        sources = true
    }

//    test {
//        espresso = true
//        espressoForLibraries = true
//        robolectric = true
//        robolectricApis = ["21", "27"]
//    }

    wrapper {
        repo = 'https://github.com/facebook/buck.git'
//        watch += ["**/*.sq"]
    }

//    kotlin {
//        version = deps.versions.kotlin
//    }

    lint {
        disabled = true
//        version = deps.versions.androidTools
//        jvmArgs = '-Xmx1g'
    }

//    transform {
//        transforms = [
//                "appProd": [
//                        [transform: "com.uber.okbuck.transform.DummyTransform"]
//                ]
//
//        ]
//    }

    jetifier {
        aarOnly = true
        exclude = [
            "androidx.*"
        ]
//        customConfigFile = "tooling/jetifier/custom.config"
    }

//    externalDependencies {
//        versionless = true
//        allowLatestVersion = [
//            "com.google.auto.value:auto-value",
//            "com.android.tools:sdklib",
//            "com.google.code.findbugs:jsr305",
//            "com.android.tools.build:manifest-merger",
//            "com.android.tools:dvlib",
//            "org.ow2.asm:asm",
//            "org.ow2.asm:asm-commons",
//            "com.google.protobuf:protobuf-java",
//            "commons-codec:commons-codec",
//            "com.google.errorprone:error_prone_annotations",
//            "com.google.auto:auto-common",
//            "com.android.tools:sdk-common",
//            "com.android.tools.layoutlib:layoutlib-api",
//            "com.google.guava:guava",
//            "com.android.tools:common",
//            "org.apache.httpcomponents:httpcore",
//            "com.android.tools:repository",
//            "org.jetbrains.kotlin:kotlin-stdlib",
//            "org.ow2.asm:asm-tree",
//            "org.apache.httpcomponents:httpclient",
//            "org.bouncycastle:bcprov-jdk15on",
//            "commons-logging:commons-logging",
//            "com.squareup:javapoet",
//            "org.jetbrains.kotlin:kotlin-reflect",
//            "org.checkerframework:checker-compat-qual",
//            "com.google.code.gson:gson",
//            "com.android.tools.build:builder-model",
//            "com.android.tools.ddms:ddmlib",
//            "org.apache.commons:commons-compress",
//            "com.android.tools:annotations",
//            "com.android.tools.build:builder-test-api",
//            "org.apache.httpcomponents:httpmime",
//            "androidx.annotation:annotation",
//        ]
//        allowAllVersions = [
//            "org.robolectric:android-all",
//        ]
//    }

//    dependencies {
//        transform project(":dummy-transform")
//    }

//    libraryBuildConfig = false

    extraBuckOpts = [
            "appDebug": [
                    "android_binary": [
                            "trim_resource_ids = True"
                    ]
            ]
    ]

//    ruleOverrides {
//        defaultImportLocation = "//tooling/buck-defs:project_targets.bzl"
//        defaultRuleNamePrefix = "project_"
//        override {
//            nativeRuleName = "android_binary"
//        }
//    }
}

afterEvaluate {
    dependencies {
//        toolsExtraDepCache deps.external.saxon
    }
}

subprojects {
    project.configurations.all {
        resolutionStrategy {
            dependencySubstitution {
//                substitute module('com.squareup.okhttp3:okhttp') with module('com.squareup.okhttp3:okhttp:3.12.5')
//                substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module('org.jetbrains.kotlin:kotlin-stdlib:1.3.21')
//                substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module('org.jetbrains.kotlin:kotlin-stdlib-common:1.3.21')
//                substitute module('com.squareup.okio:okio') with module('com.squareup.okio:okio:2.2.2')
//                substitute module('com.google.code.findbugs:jsr305') with module('com.google.code.findbugs:jsr305:1.3.9')
//                substitute module('androidx.annotation:annotation') with module("androidx.annotation:annotation:1.0.0")
//                substitute module('androidx.multidex:multidex') with module("androidx.multidex:multidex:2.0.0")
//                substitute module('androidx.legacy:legacy-support-v13') with module("androidx.legacy:legacy-support-v13:1.0.0")
//                substitute module('androidx.legacy:legacy-support-v4') with module("androidx.legacy:legacy-support-v4:1.0.0")
//                substitute module('androidx.core:core') with module("androidx.core:core:1.0.0")
//                substitute module('androidx.arch.core:core-runtime') with module('androidx.arch.core:core-runtime:2.0.0-rc01')
//                substitute module('androidx.arch.core:core-common') with module('androidx.arch.core:core-common:2.0.0-rc01')
//                substitute module('androidx.lifecycle:lifecycle-runtime') with module('androidx.lifecycle:lifecycle-runtime:2.0.0-rc01')
//                substitute module('androidx.lifecycle:lifecycle-viewmodel') with module('androidx.lifecycle:lifecycle-viewmodel:2.0.0-rc01')
//                substitute module('androidx.lifecycle:lifecycle-livedata-core') with module('androidx.lifecycle:lifecycle-livedata-core:2.0.0-rc01')
//                substitute module('org.apache.commons:commons-lang3') with module('org.apache.commons:commons-lang3:3.5')
//                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:16.0.1")
//                substitute module('com.google.firebase:firebase-config') with module("com.google.firebase:firebase-config:16.1.3")
//                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:16.0.1")
//                substitute module('com.google.firebase:firebase-iid') with module("com.google.firebase:firebase-iid:17.0.4")
//                substitute module('com.google.android.gms:play-services-measurement-base') with module("com.google.android.gms:play-services-measurement-base:16.0.5")
//                substitute module('com.google.guava:guava') with module("com.google.guava:guava:20.0")
//                substitute module('com.facebook.soloader:soloader') with module("com.facebook.soloader:soloader:0.6.0")
            }
        }
    }
}

gradle.buildFinished {
    "zip -d .okbuck/ext/org/hamcrest/hamcrest-core.jar LICENSE.txt".execute()
    "zip -d .okbuck/ext/org/hamcrest/hamcrest-integration.jar LICENSE.txt".execute()
}
