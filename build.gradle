buildscript {
    apply from: rootProject.file("dependencies.gradle")
    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        // Remove once butterknife is updated to a stable version
        // TODO: https://github.com/uber/okbuck/issues/570
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    dependencies {
        classpath deps.build.androidPlugin
        classpath deps.build.butterKnifePlugin
        classpath deps.build.kotlinPlugin
        classpath deps.build.kotlinAllOpen
        classpath deps.build.sqlDelightPlugin
        classpath deps.build.shadowJar
    }
    configurations.all {
        exclude group:"com.android.tools.build", module: "transform-api"
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.versions.kotlin}"
        }
    }
}

allprojects { project ->
    project.apply from: rootProject.file("dependencies.gradle")
    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        // Remove once butterknife is updated to a stable version
        // TODO: https://github.com/uber/okbuck/issues/570
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    configurations.all {
        exclude group:"com.android.tools.build", module: "transform-api"
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.versions.kotlin}"
        }
    }
}

apply plugin: "com.uber.okbuck"

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin("java")) {
            addCommonConfigurationForJavaModules(project)
        } else if (
            (
                    project.plugins.hasPlugin("com.android.application") || 
                    project.plugins.hasPlugin("com.android.library")
            ) &&
                    !project.getName().contains("mini-tokped")
        ) {
            addCommonConfigurationForAndroidModules(project)
        }

        project.tasks.withType(Test) { Test task ->
            task.jvmArgs << "-Djava.awt.headless=true"
        }
    }
}

def addCommonConfigurationForJavaModules(Project project) {
    project.sourceCompatibility = JavaVersion.VERSION_1_8
    project.targetCompatibility = JavaVersion.VERSION_1_8
}

def addCommonConfigurationForAndroidModules(Project project) {
    project.android {
        compileSdkVersion config.build.compileSdk
        buildToolsVersion config.build.buildTools

        defaultConfig {
            minSdkVersion config.build.minSdk
            targetSdkVersion config.build.targetSdk
            vectorDrawables.useSupportLibrary = true
            versionCode 1
            versionName "1.0"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        lintOptions {
            lintConfig project.rootProject.file("lint.xml")
        }
    }

    def variants
    if (project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin("com.android.application")) {
        project.android {
            signingConfigs {
                debug {
                    if (project.path.equals(":kotlin-app")) {
                        storeFile project.rootProject.file("config/signing/debug_2.keystore")
                    } else if (project.path.equals(":app")) {
                        storeFile project.file("debug.keystore")
                    } else {
                        storeFile project.rootProject.file("config/signing/debug.keystore")
                    }
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.debug
                }
            }
        }
    }
    if (project.plugins.hasPlugin("com.android.application")) {
        variants = project.android.applicationVariants
    } else {
        variants = project.android.libraryVariants
    }

    if (project.plugins.hasPlugin("com.squareup.sqldelight")) {
        variants.all {

            project.android.sourceSets."${it.name}".java.srcDir project.file("build/generated/source/sqldelight")
            project.android.sourceSets."${it.name}".kotlin.srcDir project.file("build/generated/source/sqldelight")

            project.afterEvaluate { proj ->
                Task okbuckTask = proj.tasks.getByName("okbuck")
                Task sqlDelightTask = proj.tasks.getByName("generate${it.name.capitalize()}SqlDelightInterface")
                okbuckTask.dependsOn(sqlDelightTask)
            }
        }
    }
}

okbuck {
    buckBinary = "com.github.tokopedia:buck:7c9bdd9e65d5c25eeb5c4c4e2542267b6b6c6900@pex"
    resourceUnion = true
    buildToolVersion = config.build.buildTools
    target = "android-${config.build.compileSdk}"
    
    buckProjects = project.subprojects.findAll { it.name != "plugin" && it.name != "transform-cli" }

    lintExclude.put("another-app", ["debug"])

    intellij {
        sources = true
    }

    wrapper {
        repo = 'https://github.com/facebook/buck.git'
    }
    
    lint {
        disabled = true
    }

    jetifier {
        aarOnly = true
        exclude = [
            "androidx.*"
        ]
    }

    extraBuckOpts = [
            "appDebug": [
                    "android_binary": [
                            "trim_resource_ids = True"
                    ]
            ]
    ]

}

subprojects {
    project.configurations.all {
        resolutionStrategy {
            dependencySubstitution {
//                substitute module('com.squareup.okhttp3:okhttp') with module('com.squareup.okhttp3:okhttp:3.12.5')
//                substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module('org.jetbrains.kotlin:kotlin-stdlib:1.3.21')
//                substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module('org.jetbrains.kotlin:kotlin-stdlib-common:1.3.21')
//                substitute module('com.squareup.okio:okio') with module('com.squareup.okio:okio:2.2.2')
//                substitute module('com.google.code.findbugs:jsr305') with module('com.google.code.findbugs:jsr305:1.3.9')
//                substitute module('androidx.annotation:annotation') with module("androidx.annotation:annotation:1.0.0")
//                substitute module('androidx.multidex:multidex') with module("androidx.multidex:multidex:2.0.0")
//                substitute module('androidx.legacy:legacy-support-v13') with module("androidx.legacy:legacy-support-v13:1.0.0")
//                substitute module('androidx.legacy:legacy-support-v4') with module("androidx.legacy:legacy-support-v4:1.0.0")
//                substitute module('androidx.core:core') with module("androidx.core:core:1.0.0")
//                substitute module('androidx.arch.core:core-runtime') with module('androidx.arch.core:core-runtime:2.0.0-rc01')
//                substitute module('androidx.arch.core:core-common') with module('androidx.arch.core:core-common:2.0.0-rc01')
//                substitute module('androidx.lifecycle:lifecycle-runtime') with module('androidx.lifecycle:lifecycle-runtime:2.0.0-rc01')
//                substitute module('androidx.lifecycle:lifecycle-viewmodel') with module('androidx.lifecycle:lifecycle-viewmodel:2.0.0-rc01')
//                substitute module('androidx.lifecycle:lifecycle-livedata-core') with module('androidx.lifecycle:lifecycle-livedata-core:2.0.0-rc01')
//                substitute module('org.apache.commons:commons-lang3') with module('org.apache.commons:commons-lang3:3.5')
//                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:16.0.1")
//                substitute module('com.google.firebase:firebase-config') with module("com.google.firebase:firebase-config:16.1.3")
//                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:16.0.1")
//                substitute module('com.google.firebase:firebase-iid') with module("com.google.firebase:firebase-iid:17.0.4")
//                substitute module('com.google.android.gms:play-services-measurement-base') with module("com.google.android.gms:play-services-measurement-base:16.0.5")
//                substitute module('com.google.guava:guava') with module("com.google.guava:guava:20.0")
//                substitute module('com.facebook.soloader:soloader') with module("com.facebook.soloader:soloader:0.6.0")
            }
        }
    }
}

gradle.buildFinished {
    "zip -d .okbuck/ext/org/hamcrest/hamcrest-core.jar LICENSE.txt".execute()
    "zip -d .okbuck/ext/org/hamcrest/hamcrest-integration.jar LICENSE.txt".execute()
}
